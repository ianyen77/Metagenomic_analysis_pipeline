geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.2) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.4) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
source("~/GitHub/Metagenomic_analysis_pipeline/mge_ARGoapquantification.R", echo=TRUE)
#畫一張MGE豐度圖
MGE_plotdata<-MGE_ARG%>%
group_by(location)%>%
summarise(type_mean=mean(MGE_sum),type_sd=sd(MGE_sum))
MGE_plotdata$location<-factor(MGE_plotdata$location,levels=c("Raw","Finished","Upstream","Midstream","Downstream"))
ggplot(MGE_plotdata)+geom_bar(aes(x=location, y=type_mean), stat="identity",fill="#8DD3C7",alpha=0.7)+geom_errorbar(aes(x=location,ymin=type_mean-type_sd, ymax=type_mean+type_sd), width=.2,position=position_dodge(.9))+
theme_bw()+ labs(x="Location",y="Total MGEs abundance normalization against 16S")+theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
ggplot(MGE_plotdata)+geom_bar(aes(x=location, y=type_mean), stat="identity",fill="#8DD3C7",alpha=0.7,width=0.8)+geom_errorbar(aes(x=location,ymin=type_mean-type_sd, ymax=type_mean+type_sd), width=.2,position=position_dodge(.9))+
theme_bw()+ labs(x="Location",y="Total MGEs abundance normalization against 16S")+theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
source("~/GitHub/Metagenomic_analysis_pipeline/mge_ARGoapquantification.R", echo=TRUE)
source("~/GitHub/R_scripts/Plot/MGEs stacked bar plot.R", echo=TRUE)
library(openxlsx)
library(tidyverse)
library(RColorBrewer)
data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/plot/MGEblastoutform.xlsx",sheet=1,rowNames=T,colNames =T)
data<-as.data.frame(t(data))
data$sum<-apply(data,1,sum)
data<-data%>%
arrange(desc(sum))
data$sum<-NULL
data_other<-data[-(1:11),]
others<-apply(data_other,2,sum)
data<-data[(1:11),]
data<-rbind(data,others)
rownames(data)[nrow(data)]<-"others"
data$`ARGs type`<-rownames(data)
data<-separate(data,`ARGs type`,into = c("type","subtype"),sep = "__")
data[12,17]<-"Others"
data$subtype<-factor(data$subtype,levels = c("intI1","IS26","IS91","IS1166","tnpA","tnpA1","tnpA13","tnpA2","tnpA3","tniA","tniB","Others"))
plotdata<-data%>%
gather(key="sample",value="amount",1:15)
ggplot(plotdata)+
geom_bar(aes(x=sample,y=amount,fill=subtype,color=subtype),stat="identity",alpha=0.9)+
scale_fill_brewer(palette = "Set3")+scale_color_brewer(palette = "Set3")+theme(axis.title = element_text(size=13),axis.text = element_text(size=13),legend.title= element_text(size=12),legend.text = element_text(size=12))+theme_bw()+xlab("Sample")+ylab("ARGs abundance normalization against 16S")+theme_bw()+
guides(fill=guide_legend(title="MGEs"),color=guide_legend(title="MGEs"))
RColorBrewer::display.brewer.all()
display.brewer.pal(n=12,name="Set3")
ggplot(plotdata)+
geom_bar(aes(x=sample,y=amount,fill=subtype,color=subtype),stat="identity",alpha=0.9)+
scale_fill_brewer(palette = "Set3")+scale_color_brewer(palette = "Set3")+theme(axis.title = element_text(size=13),axis.text = element_text(size=13),legend.title= element_text(size=12),legend.text = element_text(size=12))+theme_bw()+xlab("Sample")+ylab("ARGs abundance normalization against 16S")+theme_bw()+
guides(fill=guide_legend(title="MGEs"),color=guide_legend(title="MGEs"))
ggplot(plotdata)+
geom_bar(aes(x=sample,y=amount,fill=subtype,color=subtype),stat="identity",alpha=0.7)+
scale_fill_brewer(palette = "Set3")+scale_color_brewer(palette = "Set3")+theme(axis.title = element_text(size=13),axis.text = element_text(size=13),legend.title= element_text(size=12),legend.text = element_text(size=12))+theme_bw()+xlab("Sample")+ylab("ARGs abundance normalization against 16S")+theme_bw()+
guides(fill=guide_legend(title="MGEs"),color=guide_legend(title="MGEs"))
ggplot(plotdata)+
geom_bar(aes(x=sample,y=amount,fill=subtype,color=subtype),stat="identity",alpha=0.7)+
scale_fill_brewer(palette = "Set3")+scale_color_brewer(palette = "Set3")+theme(axis.title = element_text(size=13),axis.text = element_text(size=13),legend.title= element_text(size=12),legend.text = element_text(size=12))+theme_bw()+xlab("Sample")+ylab("MGEs abundance normalization against 16S")+theme_bw()+
guides(fill=guide_legend(title="MGEs"),color=guide_legend(title="MGEs"))
#利用ARGOAP 用手動腳本計算16s normalized豐度的腳本
#1.需要先將DB(usearch)換成想要比對的DB(usearch.udb)(stageone)
#2.運行STAGEONE
#3.makeblastdb
#4.blastx
library("openxlsx")
library("tidyverse")
library("car")
library("FSA")
library("mdthemes")
library(RColorBrewer)
#這邊是針對evalue, idendity,aa length 做一些篩選,根據你要的條件調整過
evaluematch<-1e-7
identitymatch<-80
aa_length<-25
#接下來我們將blastx過的output 讀進來
SARG_blastx_hit<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=1,colNames = F)
colnames(SARG_blastx_hit)<-c("qseqid", "gene", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
#根據先前設定的篩選掉不符合的blast
SARG_blastx_filter<-SARG_blastx_hit%>%
filter(evalue<=evaluematch)%>%
filter(pident>=identitymatch)%>%
filter(length>=aa_length)
#接著我們將ARGDATAbase 的AA長度讀進來，可以用perl腳本取得
SARGgenelength<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=2,colNames = F)
colnames(SARGgenelength)<-c("gene","aalength")
SARG_blastx_filter<-merge(SARG_blastx_filter,SARGgenelength,all.x=T,by="gene")
#這個數字是來自metadata online.txt的16s數量
metadata16s<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=3,colNames = T)
SARG_blastx_filter<-separate(SARG_blastx_filter,qseqid,into=c("Name","seqnum"),sep = "_",remove = F)
SARG_blastx_filter$seqnum<-NULL
SARG_annoate_blastx<-merge(SARG_blastx_filter,metadata16s,by="Name",all.x = T)
#合併基因的名字
gene_name<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGE namefile.xlsx",sheet=1,colNames = F)
colnames(gene_name)<-c("gene","type","subtype")
gene_name$gene<- paste(gene_name$gene,"1", sep="_")
SARG_annoate_blastx<-merge(SARG_annoate_blastx,gene_name,by="gene",all.x=T)
SARG_annoate_blastx$SampleID<-NULL
write.xlsx(SARG_annoate_blastx,"C:/Users/USER/Desktop/MGE_blast_out.xlsx")
SARG_annoate_blastx<-read.xlsx("C:/Users/USER/Desktop/MGE_blast_out.xlsx",sheet=1)
#這個計算是將blast到的長度/reference AA的長度*16S數量，再加總
SARG_annoate_blastx<-SARG_annoate_blastx%>%
mutate("blastlength/referencelength"=length/(aalength*`#of16Sreads`))
subtype_16snormalize<-SARG_annoate_blastx%>%
group_by(Name,type,subtype)%>%
summarise(subtype_sum=sum(`blastlength/referencelength`,na.rm = T))%>%
unite("subtype",type,subtype,sep = "__" )%>%
spread(key = subtype,value = subtype_sum)
subtype_16snormalize[is.na(subtype_16snormalize)]<-0
#分析MGE跟ARG的相關性
arg<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=T,colNames =T)
arg<-as.data.frame(t(arg))
arg$sum<-apply(arg,1,sum)
arg$location<-c("Raw","Raw","Raw","Finished","Finished","Finished","Upstream","Upstream","Upstream","Midstream","Midstream","Midstream","Downstream","Downstream","Downstream")
arg$location<-factor(arg$location,levels = c("Raw","Finished","Upstream","Midstream","Downstream"))
subtype_16snormalize$sum<-apply(subtype_16snormalize[,2:19],1,sum)
MGE_ARG<-as.data.frame(cbind(as.data.frame(cbind(subtype_16snormalize$sum,arg$sum)),arg$location))
colnames(MGE_ARG)[1]<-"MGE_sum"
colnames(MGE_ARG)[2]<-"arg_sum"
colnames(MGE_ARG)[3]<-"location"
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
MGE_ARG<-MGE_ARG[-(1:3),]
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
cor.test(MGE_ARG$MGE_sum,MGE_ARG$arg_sum,method = "pearson")
cor.test(MGE_ARG$MGE_sum,MGE_ARG$arg_sum,method = "pearson")+ annotate('text', label = sprintf('R == 0.187 '),
x = 0.2, y = 0.29, size =4, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187 '),
x = 0.2, y = 0.29, size =4, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187 '),
x = 0.2, y = 0.2, size =4, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187 '),
x = 0.2, y = 0.15, size =4, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187 '),
x = 0.2, y = 0.15, size =5, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187'),x = 0.2, y = 0.15, size =5, parse = TRUE)
+annotate('text', label = sprintf('p== 0.187'),x = 0.2, y = 0.15, size =5, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187'),x = 0.2, y = 0.15, size =5, parse = TRUE)+
annotate('text', label = sprintf('p== 0.187'),x = 0.2, y = 0.15, size =5, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187'),x = 0.2, y = 0.15, size =5, parse = TRUE)+
annotate('text', label = sprintf('p== 0.187'),x = 0.2, y = 0.11, size =5, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187'),x = 0.2, y = 0.15, size =5, parse = TRUE)+
annotate('text', label = sprintf('p== 0.187'),x = 0.2, y = 0.14 size =5, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187'),x = 0.2, y = 0.15, size =5, parse = TRUE)+
annotate('text', label = sprintf('p== 0.187'),x = 0.2, y = 0.14 ,size =5, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187'),x = 0.2, y = 0.15, size =5, parse = TRUE)+
annotate('text', label = sprintf('p== 0.54'),x = 0.2, y = 0.144 ,size =5, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187'),x = 0.2, y = 0.15, size =5, parse = TRUE)+
annotate('text', label = sprintf('p== 0.54'),x = 0.2, y = 0.148 ,size =5, parse = TRUE)
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))+annotate('text', label = sprintf('R == 0.187'),x = 0.2, y = 0.15, size =5, parse = TRUE)+
annotate('text', label = sprintf('p== 0.54'),x = 0.2, y = 0.146 ,size =5, parse = TRUE)
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
View(MGE_ARG)
source("~/GitHub/Metagenomic_analysis_pipeline/mge_ARGoapquantification.R", echo=TRUE)
MGE_ARG<-MGE_ARG[-(1:3),]
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
cor.test(MGE_ARG$MGE_sum,MGE_ARG$arg_sum,method = "pearson")
MGE_ARG<-MGE_ARG[-(1:3),]
#利用ARGOAP 用手動腳本計算16s normalized豐度的腳本
#1.需要先將DB(usearch)換成想要比對的DB(usearch.udb)(stageone)
#2.運行STAGEONE
#3.makeblastdb
#4.blastx
library("openxlsx")
library("tidyverse")
library("car")
library("FSA")
library("mdthemes")
library(RColorBrewer)
#這邊是針對evalue, idendity,aa length 做一些篩選,根據你要的條件調整過
evaluematch<-1e-7
identitymatch<-80
aa_length<-25
#接下來我們將blastx過的output 讀進來
SARG_blastx_hit<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=1,colNames = F)
colnames(SARG_blastx_hit)<-c("qseqid", "gene", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
#根據先前設定的篩選掉不符合的blast
SARG_blastx_filter<-SARG_blastx_hit%>%
filter(evalue<=evaluematch)%>%
filter(pident>=identitymatch)%>%
filter(length>=aa_length)
#接著我們將ARGDATAbase 的AA長度讀進來，可以用perl腳本取得
SARGgenelength<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=2,colNames = F)
colnames(SARGgenelength)<-c("gene","aalength")
SARG_blastx_filter<-merge(SARG_blastx_filter,SARGgenelength,all.x=T,by="gene")
#這個數字是來自metadata online.txt的16s數量
metadata16s<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=3,colNames = T)
SARG_blastx_filter<-separate(SARG_blastx_filter,qseqid,into=c("Name","seqnum"),sep = "_",remove = F)
SARG_blastx_filter$seqnum<-NULL
SARG_annoate_blastx<-merge(SARG_blastx_filter,metadata16s,by="Name",all.x = T)
#合併基因的名字
gene_name<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGE namefile.xlsx",sheet=1,colNames = F)
colnames(gene_name)<-c("gene","type","subtype")
gene_name$gene<- paste(gene_name$gene,"1", sep="_")
SARG_annoate_blastx<-merge(SARG_annoate_blastx,gene_name,by="gene",all.x=T)
SARG_annoate_blastx$SampleID<-NULL
write.xlsx(SARG_annoate_blastx,"C:/Users/USER/Desktop/MGE_blast_out.xlsx")
SARG_annoate_blastx<-read.xlsx("C:/Users/USER/Desktop/MGE_blast_out.xlsx",sheet=1)
#這個計算是將blast到的長度/reference AA的長度*16S數量，再加總
SARG_annoate_blastx<-SARG_annoate_blastx%>%
mutate("blastlength/referencelength"=length/(aalength*`#of16Sreads`))
subtype_16snormalize<-SARG_annoate_blastx%>%
group_by(Name,type,subtype)%>%
summarise(subtype_sum=sum(`blastlength/referencelength`,na.rm = T))%>%
unite("subtype",type,subtype,sep = "__" )%>%
spread(key = subtype,value = subtype_sum)
subtype_16snormalize[is.na(subtype_16snormalize)]<-0
write.xlsx(subtype_16snormalize,"C:/Users/USER/Desktop/MGEblastoutform.xlsx")
#分析MGE跟ARG的相關性
arg<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=T,colNames =T)
arg<-as.data.frame(t(arg))
arg$sum<-apply(arg,1,sum)
arg$location<-c("Raw","Raw","Raw","Finished","Finished","Finished","Upstream","Upstream","Upstream","Midstream","Midstream","Midstream","Downstream","Downstream","Downstream")
arg$location<-factor(arg$location,levels = c("Raw","Finished","Upstream","Midstream","Downstream"))
subtype_16snormalize$sum<-apply(subtype_16snormalize[,2:19],1,sum)
MGE_ARG<-as.data.frame(cbind(as.data.frame(cbind(subtype_16snormalize$sum,arg$sum)),arg$location))
colnames(MGE_ARG)[1]<-"MGE_sum"
colnames(MGE_ARG)[2]<-"arg_sum"
colnames(MGE_ARG)[3]<-"location"
MGE_ARG<-MGE_ARG[-(1:3),]
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
source("~/GitHub/Metagenomic_analysis_pipeline/mge_ARGoapquantification.R", echo=TRUE)
#畫一張MGE豐度圖
MGE_plotdata<-MGE_ARG%>%
group_by(location)%>%
summarise(type_mean=mean(MGE_sum),type_sd=sd(MGE_sum))
MGE_plotdata$location<-factor(MGE_plotdata$location,levels=c("Raw","Finished","Upstream","Midstream","Downstream"))
ggplot(MGE_plotdata)+geom_bar(aes(x=location, y=type_mean), stat="identity",fill="#8DD3C7",alpha=0.7,width=0.8)+geom_errorbar(aes(x=location,ymin=type_mean-type_sd, ymax=type_mean+type_sd), width=.2,position=position_dodge(.9))+
theme_bw()+ labs(x="Location",y="Total MGEs abundance normalization against 16S")+theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
#分析顯著差異
varaible_and_group<-MGE_sumlocation#想測試的變數跟組別
{#檢查數據是否是常態分布的,利用shapiro.test來檢驗數據是不是常態的，如果p>0.05那麼數據就是常態的
Data.levels<-split(MGE_ARG, MGE_ARG$location)
for(i in seq(length(Data.levels))) {
group.n<-length(Data.levels[[i]]$location)
group.name <-Data.levels[[i]]$location[1]
cat(paste("Group: ", group.name, sep=''), sep="", append=TRUE)
if (group.n < 50) {
shapiro.result<- shapiro.test(Data.levels[[i]]$subtype_sum)
cat(", Shapiro-Wilk normality test W = ", shapiro.result$statistic, " p-value = ", shapiro.result$p.value, "\n" , sep="")
} else {
ks.result<-ks.test(Data.levels[[i]]$subtype_sum, pnorm, mean(Data.levels[[i]]$subtype_sum), sd(Data.levels[[i]]$subtype_sum))
cat(", Kolmogorov-Smirnov normality test D = ", ks.result$statistic, " p-value = ", ks.result$p.value, "\n" , sep="", append=TRUE)
}
}
#檢查數據變異數的同質性，，如果levenes test 的結果p>0.05，那我們可以認為以這幾個組別間的變異數沒有明顯差異，他們是同質的P
homo<-leveneTest(varaible_and_group,data = MGE_ARG)
if (homo$`Pr(>F)`[1]>0.05){
print("data is homo")
}else{print ("data is nonhomo")}
#如果不同質可以用ftest來看是誰不同質
#res.ftest <- var.test(Data.levels[[1]]$bacitracin,Data.levels[[4]]$bacitracin,data = data)
#res.ftest
}
#分析顯著差異
varaible_and_group<-MGE_sum~location#想測試的變數跟組別
{#檢查數據是否是常態分布的,利用shapiro.test來檢驗數據是不是常態的，如果p>0.05那麼數據就是常態的
Data.levels<-split(MGE_ARG, MGE_ARG$location)
for(i in seq(length(Data.levels))) {
group.n<-length(Data.levels[[i]]$location)
group.name <-Data.levels[[i]]$location[1]
cat(paste("Group: ", group.name, sep=''), sep="", append=TRUE)
if (group.n < 50) {
shapiro.result<- shapiro.test(Data.levels[[i]]$subtype_sum)
cat(", Shapiro-Wilk normality test W = ", shapiro.result$statistic, " p-value = ", shapiro.result$p.value, "\n" , sep="")
} else {
ks.result<-ks.test(Data.levels[[i]]$subtype_sum, pnorm, mean(Data.levels[[i]]$subtype_sum), sd(Data.levels[[i]]$subtype_sum))
cat(", Kolmogorov-Smirnov normality test D = ", ks.result$statistic, " p-value = ", ks.result$p.value, "\n" , sep="", append=TRUE)
}
}
#檢查數據變異數的同質性，，如果levenes test 的結果p>0.05，那我們可以認為以這幾個組別間的變異數沒有明顯差異，他們是同質的P
homo<-leveneTest(varaible_and_group,data = MGE_ARG)
if (homo$`Pr(>F)`[1]>0.05){
print("data is homo")
}else{print ("data is nonhomo")}
#如果不同質可以用ftest來看是誰不同質
#res.ftest <- var.test(Data.levels[[1]]$bacitracin,Data.levels[[4]]$bacitracin,data = data)
#res.ftest
}
View(MGE_ARG)
#分析顯著差異
varaible_and_group<-MGE_sum~location#想測試的變數跟組別
{#檢查數據是否是常態分布的,利用shapiro.test來檢驗數據是不是常態的，如果p>0.05那麼數據就是常態的
Data.levels<-split(MGE_ARG, MGE_ARG$location)
for(i in seq(length(Data.levels))) {
group.n<-length(Data.levels[[i]]$location)
group.name <-Data.levels[[i]]$location[1]
cat(paste("Group: ", group.name, sep=''), sep="", append=TRUE)
if (group.n < 50) {
shapiro.result<- shapiro.test(Data.levels[[i]]$subtype_sum)
cat(", Shapiro-Wilk normality test W = ", shapiro.result$statistic, " p-value = ", shapiro.result$p.value, "\n" , sep="")
} else {
ks.result<-ks.test(Data.levels[[i]]$subtype_sum, pnorm, mean(Data.levels[[i]]$subtype_sum), sd(Data.levels[[i]]$subtype_sum))
cat(", Kolmogorov-Smirnov normality test D = ", ks.result$statistic, " p-value = ", ks.result$p.value, "\n" , sep="", append=TRUE)
}
}
#檢查數據變異數的同質性，，如果levenes test 的結果p>0.05，那我們可以認為以這幾個組別間的變異數沒有明顯差異，他們是同質的P
homo<-leveneTest(varaible_and_group,data = MGE_ARG)
if (homo$`Pr(>F)`[1]>0.05){
print("data is homo")
}else{print ("data is nonhomo")}
#如果不同質可以用ftest來看是誰不同質
#res.ftest <- var.test(Data.levels[[1]]$bacitracin,Data.levels[[4]]$bacitracin,data = data)
#res.ftest
}
{#檢查數據是否是常態分布的,利用shapiro.test來檢驗數據是不是常態的，如果p>0.05那麼數據就是常態的
Data.levels<-split(MGE_ARG, MGE_ARG$location)
for(i in seq(length(Data.levels))) {
group.n<-length(Data.levels[[i]]$location)
group.name <-Data.levels[[i]]$location[1]
cat(paste("Group: ", group.name, sep=''), sep="", append=TRUE)
if (group.n < 50) {
shapiro.result<- shapiro.test(Data.levels[[i]]$MGE_sum)
cat(", Shapiro-Wilk normality test W = ", shapiro.result$statistic, " p-value = ", shapiro.result$p.value, "\n" , sep="")
} else {
ks.result<-ks.test(Data.levels[[i]]$subtype_sum, pnorm, mean(Data.levels[[i]]$MGE_sum), sd(Data.levels[[i]]$MGE_sum))
cat(", Kolmogorov-Smirnov normality test D = ", ks.result$statistic, " p-value = ", ks.result$p.value, "\n" , sep="", append=TRUE)
}
}
#檢查數據變異數的同質性，，如果levenes test 的結果p>0.05，那我們可以認為以這幾個組別間的變異數沒有明顯差異，他們是同質的P
homo<-leveneTest(varaible_and_group,data = MGE_ARG)
if (homo$`Pr(>F)`[1]>0.05){
print("data is homo")
}else{print ("data is nonhomo")}
#如果不同質可以用ftest來看是誰不同質
#res.ftest <- var.test(Data.levels[[1]]$bacitracin,Data.levels[[4]]$bacitracin,data = data)
#res.ftest
}
#我們必須手動去看是否是常態及同質的，如果兩者皆符合，那我們可以使用t-test
pairwise.t.test(MGE_ARG$MGE_sum,MGE_ARG$location,p.adjust.method = "BH")
?pairwise.t.test
data<-MGE_ARG
varaible_and_group<-MGE_sum~location#想測試的變數跟組別
#我們必須先檢查數據是不是常態分布及變異數的同質性，才能決定我們要用的檢定方法。
#檢查數據變異數的同質性，可以使用levenes test
#如果levenes test 的結果p>0.05，那我們可以認為以這幾個組別間的變異數沒有明顯差異，他們是同質的P
{homo<-leveneTest(varaible_and_group,data = data)
homo
if (homo$`Pr(>F)`[1]>0.05){
print("data is homo")
}else{print ("data is nonhomo")}
#接著檢查數據是否是常態分布的
res.aov <- aov(varaible_and_group, data = data)
plot(res.aov,2)#這個是QQplot 可以透過這張圖來看一下有哪些點可以拿掉。
aov_residuals <- residuals(object = res.aov )
#利用shapiro.test來檢驗數據是不是常態的，如果p>0.05那麼數據就是常態的
a<-shapiro.test(x = aov_residuals)
if(a["p.value"]>0.05){
print("data is normal distribution")
}else{print("data is  not a normal distribution")}
#如果沒問題(常態且同質)就可以看ANOVA的結果了
if (a["p.value"]>0.05 && homo$`Pr(>F)`[1]>0.05){
#如果p<0.05，那表是多組間的差距是不同的，那我們可以用事後檢定來看到底是誰不一樣
print ("we can use anova ")
anova_p<-summary(res.aov)
if (anova_p[[1]]$`Pr(>F)`[1]<0.05){
print ("anova p<0.05, use TukeyHSD")
TukeyHSD(res.aov)
}else{
print("anova p>0.05,difference is insignificiant")
}
}else{
#數據在anova的兩項假設中有一項不符合，因此我們要使用kruskal-wallis來檢定
print ("use kruskal wallise rank sum test")
kruskal_output<-kruskal.test(varaible_and_group, data = data)
if (kruskal_output$p.value< 0.05){
#kruskal-wallis 檢定 p <0.05，表示組間有差距，因此我們要使用事後檢定
#我們可以使用Dunntest來看看是哪一組不同
PT = dunnTest(varaible_and_group, data = data,
method="bh")    # Can adjust p-values;
print (PT)
}else{
print ("kruskal-wallis p>0.05,difference is insignificiant")
}
}
}
library(openxlsx)
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
data_contig<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARC_analysis/ARC_phyla_整理.xlsx",sheet=1)
data_plasflow<-read.xlsx("C:/Users/USER/Desktop/plasflow out.xlsx",sheet=2,colNames = T)
data_plasflow<-read.xlsx("C:/Users/USER/Desktop/ARC_plasflow out.xlsx",sheet=2,colNames = T)
View(data_plasflow)
data_plasflow<-data_plasflow %>%
separate(label,into=c("type","pla_taxon"))
View(data_plasflow)
data_plasflow<-data_plasflow %>%
separate(label,into=c("type","pla_taxon"))%>%
count(type)
data_plasflow<-read.xlsx("C:/Users/USER/Desktop/ARC_plasflow out.xlsx",sheet=2,colNames = T)
data_plasflow<-data_plasflow %>%
separate(label,into=c("type","pla_taxon"))%>%
count(type)
View(data_plasflow)
data_plasflow<-read.xlsx("C:/Users/USER/Desktop/ARC_plasflow out.xlsx",sheet=2,colNames = T)
data_plasflow<-data_plasflow %>%
separate(label,into=c("type","pla_taxon"))
View(data_plasflow)
data_plasflow<-data_plasflow %>%
separate(label,into=c("type","pla_taxon"))%>%
group_by(Sample,pla_taxon)%>%
count()
data_plasflow<-read.xlsx("C:/Users/USER/Desktop/ARC_plasflow out.xlsx",sheet=2,colNames = T)
data_plasflow<-data_plasflow %>%
separate(label,into=c("type","pla_taxon"))%>%
group_by(Sample,pla_taxon)%>%
count()
View(data_plasflow)
data_plasflow<-read.xlsx("C:/Users/USER/Desktop/ARC_plasflow out.xlsx",sheet=2,colNames = T)
data_plasflow<-data_plasflow %>%
separate(label,into=c("type","pla_taxon"))%>%
group_by(Sample,pla_taxon)%>%
count()
View(data_plasflow)
data_plasflow<-data_plasflow %>%
separate(label,into=c("type","pla_taxon"))%>%
group_by(Sample,type)%>%
count()
data_plasflow<-read.xlsx("C:/Users/USER/Desktop/ARC_plasflow out.xlsx",sheet=2,colNames = T)
data_plasflow<-data_plasflow %>%
separate(label,into=c("type","pla_taxon"))%>%
group_by(Sample,type)%>%
count()
View(data_plasflow)
write.xlsx(data_plasflow,"C:/Users/USER/Desktop/zz.xlsx")
read.xlsx("C:/Users/USER/Desktop/zz.xlsx")
data<-read.xlsx("C:/Users/USER/Desktop/zz.xlsx")
View(data_plasflow)
View(data)
View(data)
View(data)
View(data)
ggplot(data)+
geom_bar(aes(x=Sample,y=Percentage,fill=type,color=type),alpha=0.85,stat="identity")+
scale_fill_brewer(palette = "Set3")+scale_color_brewer(palette = "Set3")
ggplot(data)+
geom_bar(aes(x=Sample,y=Percentage,fill=type,color=type),alpha=0.85,stat="identity")+
scale_fill_brewer(palette = "Set3")+scale_color_brewer(palette = "Set3")+theme_bw()
ggplot(data)+
geom_bar(aes(x=Sample,y=Percentage,fill=type,color=type),alpha=0.7,stat="identity")+
scale_fill_brewer(palette = "Set3")+scale_color_brewer(palette = "Set3")+theme_bw()+
labs(x="Sample",y="Relative abundance")+theme(axis.title = element_text(size=12.5),axis.text  = element_text(size=9),legend.title= element_text(size=12.5),legend.text = element_text(size=12))
View(data_plasflow)
RColorBrewer::brewer.pal(12,"Set3")
color<-c("#8DD3C7","#80B1D3","#BEBADA")
ggplot(data)+
geom_bar(aes(x=Sample,y=Percentage,fill=type,color=type),alpha=0.7,stat="identity")+
scale_fill_manual(values = color)+scale_color_manual(values = color)+theme_bw()
color<-c("#80B1D3","#BEBADA","#8DD3C7")
ggplot(data)+
geom_bar(aes(x=Sample,y=Percentage,fill=type,color=type),alpha=0.7,stat="identity")+
scale_fill_manual(values = color)+scale_color_manual(values = color)+theme_bw()+
labs(x="Sample",y="Relative abundance")+theme(axis.title = element_text(size=12.5),axis.text  = element_text(size=9),legend.title= element_text(size=12.5),legend.text = element_text(size=12))
color<-c("#80B1D3","#BEBADA","#FFFFB3")
ggplot(data)+
geom_bar(aes(x=Sample,y=Percentage,fill=type,color=type),alpha=0.7,stat="identity")+
scale_fill_manual(values = color)+scale_color_manual(values = color)+theme_bw()+
labs(x="Sample",y="Relative abundance")+theme(axis.title = element_text(size=12.5),axis.text  = element_text(size=9),legend.title= element_text(size=12.5),legend.text = element_text(size=12))
ggplot(data)+
geom_bar(aes(x=Sample,y=Percentage,fill=type,color=type),alpha=0.7,stat="identity",width = 0.8)+
scale_fill_manual(values = color)+scale_color_manual(values = color)+theme_bw()+
labs(x="Sample",y="Relative abundance")+theme(axis.title = element_text(size=12.5),axis.text  = element_text(size=9),legend.title= element_text(size=12.5),legend.text = element_text(size=12))
